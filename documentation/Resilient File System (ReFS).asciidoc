= Resilient File System (ReFS)
Analysis of the Windows Resilient File System

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary

The Resilient File System (ReFS) was introduced in Windows 8 server pre release,
which became Windows 2012 server, and was added to Windows 8.1. ReFS is a new
file system to the Windows NT platform. This specification is based on available
documentation and was enhanced by analyzing test data.

This document is intended as a working document of the data format specification
for the libfsrefs project.

[preface]
== Document information

[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | This document contains information about the Resilient File System (ReFS)
| Classification: | Public
| Keywords: | ReFS, Resilient File System
|===

[preface]
== License

....
Copyright (C) 2012-2023, Joachim Metz <joachim.metz@gmail.com>.
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the section entitled "GNU Free Documentation License".
....

[preface]
== Revision history

[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | J.B. Metz | May 2012 | Initial version.
| 0.0.2 | J.B. Metz | September 2012 | Additional information about format.
| 0.0.3 | J.B. Metz | November 2013 | Additional information about format.
| 0.0.4 | J.B. Metz | June 2023 | Switched to asciidoc format and additional information about format.
| 0.0.5 | J.B. Metz | July 2023 | Additional information about format.
|===

:numbered:
== Overview

The Resilient File System (ReFS) was introduced in Windows 8 server pre release,
which became Windows 2012 server, and was added to Windows 8.1. ReFS is a new
file system to the Windows NT platform.

A volume consists of:

* a volume header
* metadata blocks
** superblock
* file and directory data
* a copy of the volume header

[cols="1,5",options="header"]
|===
| Characteristics | Description
| Byte order | little-endian
| Date and time values | FILETIME in UTC
| Character strings | ASCII strings are Single Byte Character (SBC) or Multi Byte Character (MBC) string stored with a codepage. Sometimes referred to as ANSI string representation. +
Though technically maybe incorrect, this document will use term (extended) ASCII string. +
Unicode strings are stored in UTF-16 little-endian without the byte order mark (BOM).
|===

=== Versions

There are multiple version of ReFS.

[cols="1,5",options="header"]
|===
| ReFS version | Remarks
| 1.1 | Used by Windows 8 (preview) and Windows Server 2012
| 1.2 | Used by Windows 8.1, Windows 10 (1507 to 1607) and Windows Server 2012 R2
| |
| 2.0 | Used by Windows Server 2016 (preview)
| |
| 2.2 | Used by Windows 10 (preview)
| |
| 3.0 | Used by Windows Server 2016 (preview)
| 3.1 | Used by Windows Server 2016
| 3.2 | Used by Windows 10 (1703)
| 3.3 | Used by Windows 10 (1709)
| 3.4 | Used by Windows 10 (1803) and Windows server 2019
| 3.5 | Used by Windows 11 (preview)
| 3.6 | Used by Windows 11 (preview)
| 3.7 | Used by Windows 11 and Windows server 2022
|===

=== Test version

The following version of programs were used to test the information within this
document:

* Windows 8
* Windows 2012 Server R2
* Windows 2016 Server
* Windows 2019 Server

== The volume header

The volume header is stored at the start of the volume. A copy of volume header
is stored at the end of the volume.

[NOTE]
The size of the partition can be larger then the number of sectors in the
volume.

The volume header is 512 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
4+| _File system recognition structure (FILE_SYSTEM_RECOGNITION_STRUCTURE)_
| 0 | 3 | 0x00 | Boot entry point (or JMP instruction)
| 3 | 8 | "ReFS\x00\x00\x00\x00" | File system signature (or file system name)
| 11 | 5 | 0x00 | [yellow-background]*Unknown (empty values)*
| 16 | 4 | "FSRS" | File system recognition structure identifier
| 20 | 2 | 0x200 | [yellow-background]*Unknown (size of file system recognition structure?)*
| 22 | 2 | | [yellow-background]*Unknown (checksum of file system recognition structure?)*
4+|
| 24 | 8 | | Number of sectors
| 32 | 4 | | Sector size
| 36 | 4 | | Sectors per cluster block (allocation unit)
| 40 | 1 | | Major format version
| 41 | 1 | | Minor format version
| 42 | 2 | 0x00 | [yellow-background]*Unknown (flags?)*
| 44 | 4 | | [yellow-background]*Unknown*
| 48 | 8 | 0x00 | [yellow-background]*Unknown (empty values)*
| 56 | 8 | | Volume serial number
| 64 | 8 | | Container (or band size)
| 72 | 440 | 0x00 | [yellow-background]*Unknown (empty values)*
|===

[NOTE]
Note that currently 4096 and 65536 have been observed as supported cluster block
(allocation unit) byte sizes.

[NOTE]
Note the container size has been first observed in format version 3.4, in previous format versions such as 3.1, which has containers, this value is 0.

== Metadata

Metadata is stored in one or more blocks (or pages).

There are multiple levels of metadata:

[cols="1,1,5",options="header"]
|===
| Level | Block signature | Description
| 0 | "SUPB" | Superblock
| 1 | "CHKP" | Checkpoint
| 2+ | "MSB+" | Ministore tree (B+-tree)
|===

[yellow-background]*TODO: is the metadata block referred to as synchronous ministore (SMS) by Microsoft?*

=== [[metadata_block_header]]Metadata block header

==== Metadata block header - format version 1

The format version 1 metadata block header is 48 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Block number +
The block number is relative from the start of the volume
| 8 | 8 | | [yellow-background]*Unknown (sequence number?)*
| 16 | 8 | 0x00 | [yellow-background]*Unknown (empty values)*
| 24 | 8 | | [yellow-background]*Unknown*
| 32 | 8 | 0x01 | [yellow-background]*Unknown (flags or level?)*
| 40 | 8 | 0x00 | [yellow-background]*Unknown (empty values)*
|===

[yellow-background]*TODO: It seems that the data in bytes 8 â€“ 23 is used as an identifier. Level 3 table contains an identifier that matches the data in the corresponding level 4 block.*

==== Metadata block header - format version 3

The format version 3 metadata block header is 80 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Signature
| 4 | 4 | 2 | [yellow-background]*Unknown*
| 8 | 4 | 0x00 | [yellow-background]*Unknown (empty values)*
| 12 | 4 | | [yellow-background]*Unknown (volume signature?)*
| 16 | 8 | | [yellow-background]*Unknown (virtual allocator clock?)*
| 24 | 8 | | [yellow-background]*Unknown (tree update clock?)*
| 32 | 8 | | First block number
| 40 | 8 | | Second block number
| 48 | 8 | | Third block number
| 56 | 8 | | Fourth block number
| 64 | 8 | | [yellow-background]*Unknown (table identifier upper 64-bit?)*
| 72 | 8 | | [yellow-background]*Unknown (table identifier lower 64-bit?)*
|===

[NOTE]
In format version 3 the metadata can span multiple metadata blocks.

=== [[metadata_block_reference]]Metadata block reference

==== Metadata block reference - format version 1

The format version 1 metadata block reference is 24 bytes of size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Block number
4+| _Checkum descriptor_
| 8 | 2 | 0x00 | [yellow-background]*Unknown (empty values)*
| 10 | 1 | | Checksum type
| 11 | 1 | | Checksum data offset +
The offset is relative to the start of the checksum descriptor
| 12 | 2 | | Checksum data size
| 14 | 2 | 0x00 | [yellow-background]*Unknown (empty values)*
| 16 | 8 | | Checksum data
|===

==== Metadata block reference - format version 3

The format version 3 metadata block reference is 48 bytes of size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | First block number
| 8 | 8 | | Second block number
| 16 | 8 | | Third block number
| 24 | 8 | | Fourth block number
4+| _Checkum descriptor_
| 32 | 2 | 0x00 | [yellow-background]*Unknown (empty values)*
| 34 | 1 | | Checksum type
| 35 | 1 | | Checksum data offset +
The offset is relative to the start of the checksum descriptor
| 36 | 2 | | Checksum data size
| 38 | 2 | 0x00 | [yellow-background]*Unknown (empty values)*
| 40 | 8 | | Checksum data
|===

==== Checksum type

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 1 | | CRC-32C (or CRC32-C), which uses the Castagnoli polynomial (0x1edc6f41)
| 2 | | CRC64-ECMA-182 +
Checksum data size is 8 bytes
|===

== Superblock (level 0) metadata

The superblock metadata consists of:

* <<metadata_block_header,Metadata block header>>
* Superblock
* Checkpoint references data
* Self <<metadata_block_reference,metadata block reference>>

=== Superblock

The superblock is 48 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 16 | | Volume identifier
| 16 | 8 | 0x00 | [yellow-background]*Unknown (empty values)*
| 24 | 8 | | [yellow-background]*Unknown (sequence number?)*
| 32 | 4 | | Checkpoint references data offset +
The offset is relative to the start of the metadata block
| 36 | 4 | 2 | [yellow-background]*Unknown (number of checkpoint metadata block numbers?)*
| 40 | 4 | | Self (block) reference data offset +
The offset is relative to the start of the metadata block
| 44 | 4 | | Self (block) reference data size
|===

=== Checkpoint references data

The checkpoint references data is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | number of entries x 8 | | Checkpoint metadata block number
|===

== Checkpoint (level 1) metadata

The checkpoint metadata consists of:

* <<metadata_block_header,Metadata block header>>
* Superblock
* Checkpoint header
* Checkpoint trailer
* Self <<metadata_block_reference,metadata block reference>
* Ministore tree <<metadata_block_reference,metadata block references>>

=== Checkpoint header

The checkpoint header is 16 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 0x00 | [yellow-background]*Unknown (empty values)*
| 4 | 2 | | Major format version
| 6 | 2 | | Minor format version
| 8 | 4 | | Self (block) reference data offset +
The offset is relative to the start of the metadata block
| 12 | 4 | | Self (block) reference data size
|===

=== Checkpoint trailer

==== Checkpoint trailer - format version 1

The format version 1 checkpoint trailer is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (sequence number?)*
| 8 | 4 | | [yellow-background]*Unknown (checkpoint data size?)*
| 12 | 4 | | [yellow-background]*Unknown (seen: 32)*
| 16 | 8 | | [yellow-background]*Unknown*
| 24 | 4 | | Number of offsets
| 28 | number of offset x 4 | | Array of offsets +
The offset is relative to the start of the metadata block
| ... | ... | 0x00 | [yellow-background]*Unknown (empty values)*
|===

==== Checkpoint trailer - format version 3

The format version 3 checkpoint trailer is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (sequence number or checkpoint clock?)*
| 8 | 8 | | [yellow-background]*Unknown (virtual allocator clock?)*
| 16 | 4 | | [yellow-background]*Unknown (oldest log record?)*
| 20 | 4 | | [yellow-background]*Unknown*
| 24 | 8 | | [yellow-background]*Unknown*
| 32 | 8 | | [yellow-background]*Unknown*
| 40 | 4 | | [yellow-background]*Unknown (checkpoint data size?)*
| 44 | 4 | | [yellow-background]*Unknown (seen: 32)*
| 48 | 4 | | Number of offsets
| 52 | number of offset x 4 | | Array of offsets +
The offset is relative to the start of the metadata block
| ... | ... | 0x00 | [yellow-background]*Unknown (empty values)*
|===

=== Ministore tree block references

[cols="1,1,5",options="header"]
|===
| Index | Identifier | Description
| 0 | | Objects tree
| 1 | | Medium allocator tree
| 2 | | Container allocator tree
| 3 | | Schema tree
| 4 | | Parent-child relationship tree
| 5 | | Copy of object tree
| 6 | | Block reference count tree
3+| _Seen in format version 3_
| 7 | | Container tree
| 8 | | Copy of container tree
| 9 | | Copy of schema tree
| 10 | | Container index tree
| 11 | | Integrity state tree
| 12 | | Small allocator tree
|===

== [[ministore_tree]]Ministore tree (level 2+) metadata

The ministore tree metadata consists of:

* <<metadata_block_header,Metadata block header>>
* Node header offset
* Optional tree header
* Optional header data
* Node header
* Node records
* Unused
* Node record offsets

[NOTE]
Note that in format version 3 the upper 16-bit of the record offsets is set
to 0xffff.

=== Node header offset

The node header offset is 4 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Node header offset +
The offset is relative to the start of the node header offset
|===

=== Tree header

The tree header is 36 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | 40 | Header data offset +
The offset is relative to the start of the node header offset
| 2 | 2 | | [yellow-background]*Unknown (seen: 0 or 1)*
| 4 | 4 | | [yellow-background]*Unknown (seen: 0)*
| 8 | 4 | | [yellow-background]*Unknown*
| 12 | 4 | | [yellow-background]*Unknown*
| 16 | 4 | | [yellow-background]*Unknown (seen: 2)*
| 20 | 4 | | [yellow-background]*Unknown (number of branch nodes?)*
| 24 | 4 | | [yellow-background]*Unknown*
| 28 | 4 | | [yellow-background]*Unknown (number of leaf values?)*
| 32 | 4 | | [yellow-background]*Unknown*
|===

=== Node header

The node header is 32 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Data area start offset +
The offset is relative to the start of the node header
| 4 | 4 | | Data area end offset +
The offset is relative to the start of the node header
| 8 | 4 | | Unused data size
| 12 | 1 | | Node level, where 0 is the level of the leaf values
| 13 | 1 | | Node type flags
| 14 | 2 | | [yellow-background]*Unknown (empty values)*
| 16 | 4 | | Record offsets start offset +
The offset is relative to the start of the node information entry
| 20 | 4 | | Number of record offsets
| 24 | 4 | | Record offsets end offset +
The offset is relative to the start of the node information entry or 0 if not set
| 28 | 4 | | [yellow-background]*Unknown (empty values)*
|===

==== Node type flags

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x01 | | Is branch (or inner) node
| 0x02 | | Is root node
| 0x04 | | Is stream node
|===

=== Node record

The node record is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Node record size +
Includes the 4 bytes of the size value
| 4 | 2 | | Key data offset +
The offset is relative to the start of the node record
| 6 | 2 | | Key data size
| 8 | 2 | | Flags +
See section: <<node_record_flags,Node record flags>>
| 10 | 2 | | Value data offset +
The offset is relative to the start of the node record
| 12 | 2 | | Value data size
|===

==== [[node_record_flags]]Node record flags

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x0002 | | [yellow-background]*Unknown (No key data?)*
| 0x0004 | | [yellow-background]*Unknown (Is unallocated (free)?)*
| 0x0008 | | Value data contains an embedded Ministore node
| | |
| 0x0040 | | [yellow-background]*Unknown (Is stream record?)*
|===

==== Branch node record

The key of a branch node contains key of the largest value of the corresponding
branch. Note that the key of the last branch node can be empty.

The value of a branch node contains a <<metadata_block_reference,metadata block reference>>
of the corresponding sub node.

== Objects tree

The objects tree is a <<ministore_tree,Ministore B+-tree>> that contains
object records.

=== Object record

An object record consists of:

* key, containing an <<object_identifiers,object identifier>>
* value, containing a <<metadata_block_reference,metadata block reference>> that reference the corresponding object <<ministore_tree,Ministore B+-tree>>

==== Object record key

The object record key is 16 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Record key (upper 64-bits), which contains 0-byte values
| 8 | 8 | | Record key (lower 64-bits), which contains an <<object_identifiers,object identifier>>
|===

[NOTE]
Note that the record key corresponds to the file system identifier.

==== Object record value - format version 1

The format version 1 object record value is 48 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 24 | | Block reference +
See section: <<metadata_block_reference,metadata block reference>>
| 24 | 8 | | [yellow-background]*Unknown*
| 32 | 4 | | [yellow-background]*Unknown*
| 36 | 4 | | [yellow-background]*Unknown*
| 40 | 8 | | [yellow-background]*Unknown (related object identifier?)*
|===

===== Object record value - format version 3

The format version 3 object record value is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown*
| 8 | 4 | | [yellow-background]*Unknown*
| 12 | 4 | | [yellow-background]*Unknown (size of block reference data?)*
| 16 | 4 | | [yellow-background]*Unknown (size of used record data?)*
| 20 | 4 | | [yellow-background]*Unknown*
| 24 | 4 | | [yellow-background]*Unknown*
| 28 | 4 | | [yellow-background]*Unknown*
| 32 | 48 | | Block reference +
See section: <<metadata_block_reference,metadata block reference>>
| ... | ... | | [yellow-background]*Unknown (remnant data?)*
|===

===== [[object_identifiers]]Object identifiers

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00000007 | | Upcase object +
Introduced in format version 3?
| 0x00000008 | | Copy of Upcase object +
Introduced in format version 3?
| 0x00000009 | | Logfile information object +
Introduced in format version 3?
| 0x0000000a | | Copy of logfile information object +
Introduced in format version 3?
| | |
| 0x0000000d | | Trash stream object +
Introduced in format version 3?
| | |
| 0x00000500 | | <<volume_information_object,Volume information object>>
| 0x00000501 | | Copy of volume information object +
Introduced in format version 3?
| | |
| 0x00000520 | | <<file_system_information_object,File system information object>>
| | |
| 0x00000530 | |
| | |
| 0x00000540 | | +
Introduced in format version 3?
| 0x00000541 | | +
Introduced in format version 3?
| | |
| 0x00000600 | REFS_ROOT_DIRECTORY_ID | <<directory_object,Root directory object>>
| | |
| 0x00000701 | REFS_OBJECT_UNKNOWN_3 | <<directory_object,Directory object>> +
Values 0x00000701 and above are used for sub directories.
|===

== Container tree

The container tree is a <<ministore_tree,Ministore B+-tree>> that contains
container records.

[NOTE]
Note that the container tree has only been observed with format version 3.

=== Container record

A container record consists of:

* key, containing the container (or band) identifier
* value, containing information about the container

==== Container record key

The container record key is the first 16 bytes of the container record value.

==== Container record value

The container record value is 160 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Container (or band) identifier
| 8 | 4 | | [yellow-background]*Unknown*
| 12 | 4 | | [yellow-background]*Unknown*
| 16 | 4 | | [yellow-background]*Unknown (flags?)*
| 20 | 4 | | [yellow-background]*Unknown*
| 24 | 8 | | [yellow-background]*Unknown*
| 32 | 8 | | [yellow-background]*Unknown (number of unused cluster blocks?)*
| 40 | 8 | | [yellow-background]*Unknown*
| 48 | 28 | | [yellow-background]*Unknown (empty values)*
| 76 | 4 | | [yellow-background]*Unknown*
| 80 | 64 | | [yellow-background]*Unknown (empty values)*
| 144 | 8 | | Cluster block number
| 152 | 8 | | Cluster size +
Contains the number of (cluster) blocks
|===

== [[directory_object]]Directory object

The directory object is a <<ministore_tree,Ministore B+-tree>> that contains
multiple directory records.

The format of the directory record value is dependent on the record type in
the directory record key.

A ReFS file system identifier consists of:

* 64-bit file identifier or 0 for the directory
* 64-bit directory object identifier

=== Directory record key

The directory record key is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | | Record type
| 2 | ... | | Data
|===

==== Record types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x0010 | | Base record
| 0x0020 | | Name record
| 0x0030 | | Entry record
|===

==== Base record (record type: 0x0010)

The directory object base record key is 4 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | 0x0010 | Record type
| 2 | 2 | | [yellow-background]*Unknown (seen: 0x0000)*
|===

==== Name record (record type: 0x0020)

The directory object name record key is 24 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | 0x0020 | Record type
| 2 | 2 | | [yellow-background]*Unknown (seen: 0x8000)*
| 4 | 4 | | [yellow-background]*Unknown (empty values?)*
| 8 | 8 | | File system identifier (lower 64-bits)
| 16 | 8 | | File system identifier (upper 64-bits)
|===

The directory object name record value is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (empty values?)*
| 8 | 2 | | [yellow-background]*Unknown (seen: 0x0c)*
| 10 | ... | | Name +
Contains an UTF-16 little-endian without end-of-string character
|===

[NOTE]
The name string is not strict UTF-16 since it allows for unpaired surrogates,
such as "U+d800" and "U+dc00".

==== Entry record (record type: 0x0030)

The directory object entry record key is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | 0x0030 | Record type
| 2 | 2 | | Directory entry type +
See section: <<directory_entry_types,Directory entry types>>
| 4 | ... | | Name +
Contains an UTF-16 little-endian without end-of-string character
|===

[NOTE]
The name string is not strict UTF-16 since it allows for unpaired surrogates,
such as "U+d800" and "U+dc00".

The format of the directory object entry record value is dependent on
the directory entry type.

==== [[directory_entry_types]]Directory entry types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0 | | File system metadata file
| 1 | | File +
See section: <<directory_object_entry_record_file_values,Directory object entry record file values>>
| 2 | | Directory +
See section: <<directory_object_entry_record_directory_values,Directory object entry record directory values>>
|===

=== [[directory_object_entry_record_directory_values]]Directory object entry record directory values

The directory object entry record directory values are 72 bytes in size and
consist of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Directory object identifier +
See section: <<object_identifiers,object identifiers>>
| 8 | 8 | | [yellow-background]*Unknown (part of the object identifier?)*
| 16 | 8 | | Creation date and time +
Contains a FILETIME
| 24 | 8 | | Last modification date and time +
(Also referred to as last written date and time) +
Contains a FILETIME
| 32 | 8 | | Entry (or metadata) last modification date and time +
Contains a FILETIME
| 40 | 8 | | Last access date and time +
Contains a FILETIME
| 48 | 16 | | [yellow-background]*Unknown (empty values)*
| 64 | 4 | | File attribute flags
| 68 | 4 | | [yellow-background]*Unknown (empty values)*
|===

=== [[directory_object_entry_record_file_values]]Directory object entry record file values

The directory object entry record file values are variable in size and consist
of an embedded Ministore node. The embedded Ministore node contains:

* header data
* one or more <<directory_object_entry_record_attribute,attribute records>>

[NOTE]
Note that although the Ministore node is embedded in the record value it can
branch out to other Ministore nodes stored elsewhere.

The header data is 128 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Creation date and time +
Contains a FILETIME
| 8 | 8 | | Last modification date and time +
(Also referred to as last written date and time) +
Contains a FILETIME
| 16 | 8 | | Entry (or metadata) last modification date and time +
Contains a FILETIME
| 24 | 8 | | Last access date and time +
Contains a FILETIME
| 32 | 4 | | File attribute flags
| 36 | 4 | | [yellow-background]*Unknown*
| 40 | 8 | | File system identifier (lower 64-bits)
| 48 | 8 | | File system identifier (upper 64-bits)
| 56 | 4 | | [yellow-background]*Unknown*
| 60 | 4 | | [yellow-background]*Unknown*
| 64 | 8 | | Data size
| 72 | 8 | | Allocated (or reserved) data size
| 80 | 32 | | [yellow-background]*Unknown*
| 112 | 8 | | [yellow-background]*Unknown*
| 120 | 8 | | [yellow-background]*Unknown*
|===

=== [[directory_object_entry_record_attribute]]Attribute record

key data of default (or nameless) data attribute

....
00000000: 60 01 00 00 00 00 00 00  80 00 00 00 00 00         `....... ......
....

key data of alternate data attribute
....
00000000: 4a 00 00 00 00 00 00 00  b0 00 00 00 6d 00 79 00   J....... ....m.y.
00000010: 61 00 64 00 73 00                                  a.d.s.
....

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown*
| 8 | 4 | | [yellow-background]*Unknown (attribute type)*
| 12 | ... | | Attribute name string +
Contains an UTF-16 little-endian without end-of-string character or an end-of-string character if the attribute is nameless
|===

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x10 | $STANDARD_INFORMATION |
| 0x30 | $FILENAME |
| 0x38 | $DIR_LINK |
| 0x40 | $OBJECT_ID |
| 0x50 | $OBSOLETE |
| 0x60 | $VOLUME_NAME |
| 0x70 | $VOLUME_INFO |
| 0x80 | $DATA |
| 0x90 | $INDEX_ROOT |
| 0xa0 | $INDEX_ALLOCATION |
| 0xb0 | $NAMED_DATA |
| 0xc0 | $REPARSE_POINT |
| 0xd0 | $EA_INFORMATION |
| 0xe0 | $EA |
|===

==== [[directory_object_entry_record_resident_attribute]]Directory object entry record resident attribute

The directory object entry record resident attribute is variable in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown (seen: 0 resident?)*
| 4 | 4 | | (Resident or inline) data offset +
The offset is relative to the start of the record value
| 8 | 4 | | (Resident or inline) data size
| 12 | 4 | | [yellow-background]*Unknown*
| 16 | 8 | | [yellow-background]*Unknown*
| 24 | 8 | | [yellow-background]*Unknown*
| 32 | 8 | | [yellow-background]*Unknown*
| 40 | 8 | | [yellow-background]*Unknown*
| 32 | 8 | | [yellow-background]*Unknown*
| 40 | 4 | | [yellow-background]*Unknown*
| 44 | ... | | (Resident or inline) data
|===

==== [[directory_object_entry_record_non_resident_attribute]]Directory object entry record non-resident attribute

The directory object entry record non-resident attribute is variable in size
and consist of an embedded Ministore node. The embedded Ministore node contains:

* header data
* zero or more <<directory_object_entry_record_data_run,data run records>>

The header data is 96 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown (seen: 1 non-resident?)*
| 4 | 8 | | [yellow-background]*Unknown (empty values?)*
| 12 | 8 | | Allocated (or reserved) data size
| 20 | 8 | | Data size
| 28 | 8 | | Valid data size
| 36 | 60 | | [yellow-background]*Unknown (empty values?)*
|===

=== [[directory_object_entry_record_data_run]]Data run record

The directory object entry record data run record key is the first 16 bytes of
the directory object entry record data run record value.

The directory object entry record data run record value is 16 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Data run logical offset
| 8 | 8 | | Data run size +
Contains the number of metadata blocks
| 16 | 8 | | Data run physical offset +
Contains a metadata block number
| 24 | 8 | | [yellow-background]*Unknown*
|===

== [[file_system_information_object]]File system information object

The file system information object is a <<ministore_tree,Ministore B+-tree>>
that contains a single file system information record.

=== File system information record key

The file system information record key is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | 0x30 | [yellow-background]*Unknown*
| 2 | 2 | 0x01 | [yellow-background]*Unknown*
| 4 | ... | "Volume Direct IO File" | String +
Contains an UTF-16 little-endian without end-of-string character
|===

=== File system information record value

The file system record value is TODO bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
|===

[yellow-background]*TODO: describe*

== [[volume_information_object]]Volume information object

The volume information object is a <<ministore_tree,Ministore B+-tree>> that
contains multiple volume information records.

=== Volume information record key

The volume information record key is 8 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Object identifier +
See section: <<object_identifiers,object identifiers>>
|===

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00000510 | | Volume name record +
Comparable to NTFS volume name attribute ($VOLUME_NAME)
| | |
| 0x00000520 | | [yellow-background]*TODO: describe*
| | |
| 0x00000530 | | [yellow-background]*TODO: describe*
| | |
| 0x00000540 | | [yellow-background]*TODO: describe*
|===

=== Volume name record value

The volume name record value is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | ... | | Volume name +
Contains an UTF-16 little-endian without end-of-string character
|===

:numbered!:
[appendix]
== References

`[BALLENTHIN12]`

[cols="1,5",options="header"]
|===
| Title: | The Microsoft ReFS On-Disk Layout
| Author(s): | Willi Ballenthin
| Date: | 2012
| URL: | http://www.williballenthin.com/forensics/refs/index.html
|===

`[GREEN13]`

[cols="1,5",options="header"]
|===
| Title: | Resilient File System (ReFS) - Analysis of the File System found on Windows Server 2012 and Windows 8.1
| Author(s): | Paul K. Green
| Version: | 0.6
| Date: | September 2013
| URL: | https://docs.google.com/uc?export=download&id=0B7_P1Njdyx3hdnNtYlpVZ2taaU0
|===

`[PRADE19]`

[cols="1,5",options="header"]
|===
| Title: | Forensic Analysis of the Resilient File System (ReFS) Version 3.4
| Author(s): | Paul Prade, Tobias GroÃŸ, Andreas Dewald
| Date: | December 2019
| URL: | https://www.sciencedirect.com/science/article/pii/S266628172030010X
|===

`[MSDN]`

[cols="1,5",options="header"]
|===
| Title: | http://www.williballenthin.com/forensics/refs/index.html
| URL: | http://blogs.msdn.com/b/b8/archive/2012/01/16/building-the-next-generation-file-system-for-windows-refs.aspx
|===

[cols="1,5",options="header"]
|===
| Title: | FILE_SYSTEM_RECOGNITION_STRUCTURE structure
| URL: | https://learn.microsoft.com/en-us/windows/win32/fileio/file-system-recognition-structure
|===

`[WIKIPEDIA]`

[cols="1,5",options="header"]
|===
| Title: | Wikipedia: ReFS
| URL: | https://en.wikipedia.org/wiki/ReFS
|===

[appendix]
== GNU Free Documentation License

Version 1.3, 3 November 2008
Copyright Â© 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license
document, but changing it is not allowed.

=== 0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other functional
and useful document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without modifying it,
either commercially or noncommercially. Secondarily, this License preserves for
the author and publisher a way to get credit for their work, while not being
considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the
document must themselves be free in the same sense. It complements the GNU
General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software,
because free software needs free documentation: a free program should come with
manuals providing the same freedoms that the software does. But this License is
not limited to software manuals; it can be used for any textual work,
regardless of subject matter or whether it is published as a printed book. We
recommend this License principally for works whose purpose is instruction or
reference.

=== 1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that contains
a notice placed by the copyright holder saying it can be distributed under the
terms of this License. Such a notice grants a world-wide, royalty-free license,
unlimited in duration, to use that work under the conditions stated herein. The
"Document", below, refers to any such manual or work. Any member of the public
is a licensee, and is addressed as "you". You accept the license if you copy,
modify or distribute the work in a way requiring permission under copyright law.

A "Modified Version" of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modifications and/or
translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of the
Document that deals exclusively with the relationship of the publishers or
authors of the Document to the Document's overall subject (or to related
matters) and contains nothing that could fall directly within that overall
subject. (Thus, if the Document is in part a textbook of mathematics, a
Secondary Section may not explain any mathematics.) The relationship could be a
matter of historical connection with the subject or with related matters, or of
legal, commercial, philosophical, ethical or political position regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles are
designated, as being those of Invariant Sections, in the notice that says that
the Document is released under this License. If a section does not fit the
above definition of Secondary then it is not allowed to be designated as
Invariant. The Document may contain zero Invariant Sections. If the Document
does not identify any Invariant Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed, as
Front-Cover Texts or Back-Cover Texts, in the notice that says that the
Document is released under this License. A Front-Cover Text may be at most 5
words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy, represented
in a format whose specification is available to the general public, that is
suitable for revising the document straightforwardly with generic text editors
or (for images composed of pixels) generic paint programs or (for drawings)
some widely available drawing editor, and that is suitable for input to text
formatters or for automatic translation to a variety of formats suitable for
input to text formatters. A copy made in an otherwise Transparent file format
whose markup, or absence of markup, has been arranged to thwart or discourage
subsequent modification by readers is not Transparent. An image format is not
Transparent if used for any substantial amount of text. A copy that is not
"Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain ASCII without
markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modification. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited
only by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself, plus such
following pages as are needed to hold, legibly, the material this License
requires to appear in the title page. For works in formats which do not have
any title page as such, "Title Page" means the text near the most prominent
appearance of the work's title, preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of the
Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose title
either is precisely XYZ or contains XYZ in parentheses following text that
translates XYZ in another language. (Here XYZ stands for a specific section
name mentioned below, such as "Acknowledgements", "Dedications",
"Endorsements", or "History".) To "Preserve the Title" of such a section when
you modify the Document means that it remains a section "Entitled XYZ"
according to this definition.

The Document may include Warranty Disclaimers next to the notice which states
that this License applies to the Document. These Warranty Disclaimers are
considered to be included by reference in this License, but only as regards
disclaiming warranties: any other implication that these Warranty Disclaimers
may have is void and has no effect on the meaning of this License.

=== 2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either commercially or
noncommercially, provided that this License, the copyright notices, and the
license notice saying this License applies to the Document are reproduced in
all copies, and that you add no other conditions whatsoever to those of this
License. You may not use technical measures to obstruct or control the reading
or further copying of the copies you make or distribute. However, you may
accept compensation in exchange for copies. If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and you may
publicly display copies.

=== 3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have printed
covers) of the Document, numbering more than 100, and the Document's license
notice requires Cover Texts, you must enclose the copies in covers that carry,
clearly and legibly, all these Cover Texts: Front-Cover Texts on the front
cover, and Back-Cover Texts on the back cover. Both covers must also clearly
and legibly identify you as the publisher of these copies. The front cover must
present the full title with all words of the title equally prominent and
visible. You may add other material on the covers in addition. Copying with
changes limited to the covers, as long as they preserve the title of the
Document and satisfy these conditions, can be treated as verbatim copying in
other respects.

If the required texts for either cover are too voluminous to fit legibly, you
should put the first ones listed (as many as fit reasonably) on the actual
cover, and continue the rest onto adjacent pages.

If you publish or distribute Opaque copies of the Document numbering more than
100, you must either include a machine-readable Transparent copy along with
each Opaque copy, or state in or with each Opaque copy a computer-network
location from which the general network-using public has access to download
using public-standard network protocols a complete Transparent copy of the
Document, free of added material. If you use the latter option, you must take
reasonably prudent steps, when you begin distribution of Opaque copies in
quantity, to ensure that this Transparent copy will remain thus accessible at
the stated location until at least one year after the last time you distribute
an Opaque copy (directly or through your agents or retailers) of that edition
to the public.

It is requested, but not required, that you contact the authors of the Document
well before redistributing any large number of copies, to give them a chance to
provide you with an updated version of the Document.

=== 4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under the
conditions of sections 2 and 3 above, provided that you release the Modified
Version under precisely this License, with the Modified Version filling the
role of the Document, thus licensing distribution and modification of the
Modified Version to whoever possesses a copy of it. In addition, you must do
these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct from that
of the Document, and from those of previous versions (which should, if there
were any, be listed in the History section of the Document). You may use the
same title as a previous version if the original publisher of that version
gives permission.

B. List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified Version,
together with at least five of the principal authors of the Document (all of
its principal authors, if it has fewer than five), unless they release you from
this requirement.

C. State on the Title page the name of the publisher of the Modified Version,
as the publisher.

D. Preserve all the copyright notices of the Document.

E. Add an appropriate copyright notice for your modifications adjacent to the
other copyright notices.

F. Include, immediately after the copyright notices, a license notice giving
the public permission to use the Modified Version under the terms of this
License, in the form shown in the Addendum below.

G. Preserve in that license notice the full lists of Invariant Sections and
required Cover Texts given in the Document's license notice.

H. Include an unaltered copy of this License.

I. Preserve the section Entitled "History", Preserve its Title, and add to it
an item stating at least the title, year, new authors, and publisher of the
Modified Version as given on the Title Page. If there is no section Entitled
"History" in the Document, create one stating the title, year, authors, and
publisher of the Document as given on its Title Page, then add an item
describing the Modified Version as stated in the previous sentence.

J. Preserve the network location, if any, given in the Document for public
access to a Transparent copy of the Document, and likewise the network
locations given in the Document for previous versions it was based on. These
may be placed in the "History" section. You may omit a network location for a
work that was published at least four years before the Document itself, or if
the original publisher of the version it refers to gives permission.

K. For any section Entitled "Acknowledgements" or "Dedications", Preserve the
Title of the section, and preserve in the section all the substance and tone of
each of the contributor acknowledgements and/or dedications given therein.

L. Preserve all the Invariant Sections of the Document, unaltered in their text
and in their titles. Section numbers or the equivalent are not considered part
of the section titles.

M. Delete any section Entitled "Endorsements". Such a section may not be
included in the Modified Version.

N. Do not retitle any existing section to be Entitled "Endorsements" or to
conflict in title with any Invariant Section.

O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or appendices that
qualify as Secondary Sections and contain no material copied from the Document,
you may at your option designate some or all of these sections as invariant. To
do this, add their titles to the list of Invariant Sections in the Modified
Version's license notice. These titles must be distinct from any other section
titles.

You may add a section Entitled "Endorsements", provided it contains nothing but
endorsements of your Modified Version by various partiesâ€”for example,
statements of peer review or that the text has been approved by an organization
as the authoritative definition of a standard.

You may add a passage of up to five words as a Front-Cover Text, and a passage
of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts
in the Modified Version. Only one passage of Front-Cover Text and one of
Back-Cover Text may be added by (or through arrangements made by) any one
entity. If the Document already includes a cover text for the same cover,
previously added by you or by arrangement made by the same entity you are
acting on behalf of, you may not add another; but you may replace the old one,
on explicit permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License give
permission to use their names for publicity for or to assert or imply
endorsement of any Modified Version.

=== 5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this License,
under the terms defined in section 4 above for modified versions, provided that
you include in the combination all of the Invariant Sections of all of the
original documents, unmodified, and list them all as Invariant Sections of your
combined work in its license notice, and that you preserve all their Warranty
Disclaimers.

The combined work need only contain one copy of this License, and multiple
identical Invariant Sections may be replaced with a single copy. If there are
multiple Invariant Sections with the same name but different contents, make the
title of each such section unique by adding at the end of it, in parentheses,
the name of the original author or publisher of that section if known, or else
a unique number. Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History" in the
various original documents, forming one section Entitled "History"; likewise
combine any sections Entitled "Acknowledgements", and any sections Entitled
"Dedications". You must delete all sections Entitled "Endorsements".

=== 6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this License
in the various documents with a single copy that is included in the collection,
provided that you follow the rules of this License for verbatim copying of each
of the documents in all other respects.

You may extract a single document from such a collection, and distribute it
individually under this License, provided you insert a copy of this License
into the extracted document, and follow this License in all other respects
regarding verbatim copying of that document.

=== 7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate and
independent documents or works, in or on a volume of a storage or distribution
medium, is called an "aggregate" if the copyright resulting from the
compilation is not used to limit the legal rights of the compilation's users
beyond what the individual works permit. When the Document is included in an
aggregate, this License does not apply to the other works in the aggregate
which are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these copies of the
Document, then if the Document is less than one half of the entire aggregate,
the Document's Cover Texts may be placed on covers that bracket the Document
within the aggregate, or the electronic equivalent of covers if the Document is
in electronic form. Otherwise they must appear on printed covers that bracket
the whole aggregate.

=== 8. TRANSLATION

Translation is considered a kind of modification, so you may distribute
translations of the Document under the terms of section 4. Replacing Invariant
Sections with translations requires special permission from their copyright
holders, but you may include translations of some or all Invariant Sections in
addition to the original versions of these Invariant Sections. You may include
a translation of this License, and all the license notices in the Document, and
any Warranty Disclaimers, provided that you also include the original English
version of this License and the original versions of those notices and
disclaimers. In case of a disagreement between the translation and the original
version of this License or a notice or disclaimer, the original version will
prevail.

If a section in the Document is Entitled "Acknowledgements", "Dedications", or
"History", the requirement (section 4) to Preserve its Title (section 1) will
typically require changing the actual title.

=== 9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except as
expressly provided under this License. Any attempt otherwise to copy, modify,
sublicense, or distribute it is void, and will automatically terminate your
rights under this License.

However, if you cease all violation of this License, then your license from a
particular copyright holder is reinstated (a) provisionally, unless and until
the copyright holder explicitly and finally terminates your license, and (b)
permanently, if the copyright holder fails to notify you of the violation by
some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated
permanently if the copyright holder notifies you of the violation by some
reasonable means, this is the first time you have received notice of violation
of this License (for any work) from that copyright holder, and you cure the
violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses
of parties who have received copies or rights from you under this License. If
your rights have been terminated and not permanently reinstated, receipt of a
copy of some or all of the same material does not give you any rights to use it.

=== 10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the GNU Free
Documentation License from time to time. Such new versions will be similar in
spirit to the present version, but may differ in detail to address new problems
or concerns. See http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number. If the
Document specifies that a particular numbered version of this License "or any
later version" applies to it, you have the option of following the terms and
conditions either of that specified version or of any later version that has
been published (not as a draft) by the Free Software Foundation. If the
Document does not specify a version number of this License, you may choose any
version ever published (not as a draft) by the Free Software Foundation. If the
Document specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a version
permanently authorizes you to choose that version for the Document.

=== 11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any World Wide
Web server that publishes copyrightable works and also provides prominent
facilities for anybody to edit those works. A public wiki that anybody can edit
is an example of such a server. A "Massive Multiauthor Collaboration" (or
"MMC") contained in the site means any set of copyrightable works thus
published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 license
published by Creative Commons Corporation, a not-for-profit corporation with a
principal place of business in San Francisco, California, as well as future
copyleft versions of that license published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in part, as
part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this License, and
if all works that were first published under this License somewhere other than
this MMC, and subsequently incorporated in whole or in part into the MMC, (1)
had no cover texts or invariant sections, and (2) were thus incorporated prior
to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site under
CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC
is eligible for relicensing.

