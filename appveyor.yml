environment:
  matrix:
  - TARGET: vs2008
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 9.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2010
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 10.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2012
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 11.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2013
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 12.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2015
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    VisualStudioVersion: 14.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python38"
  - TARGET: vs2017
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    VisualStudioVersion: 15.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python38"
  - TARGET: vs2019
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    VisualStudioVersion: 16.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022-vsdebug
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: Win32
    configuration: VSDebug
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022-x64
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: x64
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: macos-x64-clang
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CC: clang
    CFLAGS: "-I/usr/local/include"
    LDFLAGS: "-L/usr/local/lib"
    CONFIGURE_OPTIONS: ""
  - TARGET: macos-x64-gcc
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CC: gcc
    CFLAGS: "-I/usr/local/include"
    LDFLAGS: "-L/usr/local/lib"
    CONFIGURE_OPTIONS: ""
  - TARGET: macos-pkgbuild
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CONFIGURE_OPTIONS: "--disable-dependency-tracking --prefix=/usr/local --with-pyprefix"
  - TARGET: cygwin64-gcc
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: ""
  - TARGET: cygwin64-gcc-no-optimization
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-shared=no"
    CFLAGS: "--coverage -O0"
    CPPFLAGS: "-DOPTIMIZATION_DISABLED"
    LDFLAGS: "--coverage"
  - TARGET: cygwin64-gcc-static-executables
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-static-executables"
  - TARGET: mingw-w64-gcc
    BUILD_ENVIRONMENT: mingw-w64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: ""
  - TARGET: mingw-w64-gcc-no-optimization
    BUILD_ENVIRONMENT: mingw-w64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-shared=no"
    CFLAGS: "--coverage -O0"
    CPPFLAGS: "-DOPTIMIZATION_DISABLED"
    LDFLAGS: "--coverage"
  - TARGET: mingw-w64-gcc-static-executables
    BUILD_ENVIRONMENT: mingw-w64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-static-executables"

install:
- cmd: if [%BUILD_ENVIRONMENT%]==[msbuild] (
    git clone https://github.com/libyal/vstools.git ..\vstools )
- sh: if ( test `uname -s` = "Darwin" && test ${BUILD_ENVIRONMENT} = "python-tox" ) || test ${BUILD_ENVIRONMENT} = "xcode"; then brew update-reset && brew update -q; fi
- sh: if ( test `uname -s` = "Darwin" && test ${BUILD_ENVIRONMENT} = "python-tox" ) || test ${BUILD_ENVIRONMENT} = "xcode"; then brew install -q autoconf automake gettext gnu-sed libtool pkg-config || true; fi
- ps: If ($env:BUILD_ENVIRONMENT -eq "cygwin64") {
    (New-Object Net.WebClient).DownloadFile("https://cygwin.com/setup-x86_64.exe", "C:\\cygwin64\\setup-x86_64.exe") }
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    C:\cygwin64\setup-x86_64.exe -qgnNdO -l C:\cygwin64\var\cache\setup -R c:\cygwin64 -s http://cygwin.mirror.constant.com -P gettext-devel -P wget )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    C:\msys64\usr\bin\pacman -S --noconfirm --needed autoconf automake gettext-devel libtool make mingw-w64-x86_64-gcc )
- ps: If ( ( "cygwin64-gcc-no-optimization", "mingw-w64-gcc-no-optimization" ).Contains( $env:TARGET ) ) {
    $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile ..\codecov.exe }

build_script:
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild" -or ($env:BUILD_ENVIRONMENT -eq "python-tox" -and $isWindows)) {
    .\synclibs.ps1;
    .\autogen.ps1 }
- ps: If ($env:TARGET -eq "vs2008") {
    .\build.ps1 -VisualStudioVersion 2008 -PythonPath $env:PYTHON_PATH -VSToolsOptions "--no-python-dll" }
- ps: If ( ( "vs2010", "vs2012", "vs2013", "vs2015" ).Contains( $env:TARGET ) ) {
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform $env:PLATFORM -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --no-python-dll" }
- ps: If ( ( "vs2017", "vs2019", "vs2022", "vs2022-vsdebug", "vs2022-x64" ).Contains( $env:TARGET ) ) {
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform $env:PLATFORM -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --no-python-dll --with-dokany" }
- sh: if test ${BUILD_ENVIRONMENT} = "xcode"; then export PATH="/usr/local/opt/gettext/bin:$PATH"; export SED="/usr/local/bin/gsed"; tests/build.sh ${CONFIGURE_OPTIONS}; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    xcopy /i /q /s C:\projects\libfsrefs C:\cygwin64\home\appveyor\libfsrefs &&
    C:\cygwin64\bin\bash -e -l -c "cd libfsrefs && wget -q 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O './config.guess' && wget -q 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' -O './config.sub'" &&
    C:\cygwin64\bin\bash -e -l -c "cd libfsrefs && tests/build.sh ${CONFIGURE_OPTIONS}" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    xcopy /i /q /s C:\projects\libfsrefs C:\msys64\home\appveyor\libfsrefs &&
    C:\msys64\usr\bin\bash -e -l -c "cd libfsrefs && tests/build.sh ${CONFIGURE_OPTIONS}" )

test_script:
- cmd: rem Run tests
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild") {
    .\runtests.ps1 }
- sh: if test ${BUILD_ENVIRONMENT} = "xcode" && test ${TARGET} != "macos-pkgbuild"; then tests/runtests.sh; fi
- sh: if test ${TARGET} = "macos-pkgbuild"; then tests/pkgbuild.sh; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    C:\cygwin64\bin\bash -l -c "cd libfsrefs && tests/runtests.sh" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    C:\msys64\usr\bin\bash -l -c "cd libfsrefs && tests/runtests.sh" )

after_test:
- cmd: if [%TARGET%]==[cygwin64-gcc-no-optimization] (
    C:\cygwin64\bin\bash -e -l -c "cd libfsrefs && for DIRECTORY in `find . -maxdepth 1 -type d`; do (cd ${DIRECTORY} && find . -maxdepth 1 -name \*.gcno -type f -exec gcov -pb {} \;) done" &&
    C:\projects\codecov.exe -R \cygwin64\home\appveyor\libfsrefs --name %TARGET% )
- cmd: if [%TARGET%]==[mingw-w64-gcc-no-optimization] (
    C:\msys64\usr\bin\bash -e -l -c "cd libfsrefs && for DIRECTORY in `find . -maxdepth 1 -type d`; do (cd ${DIRECTORY} && find . -maxdepth 1 -name \*.gcno -type f -exec gcov -pb {} \;) done" &&
    C:\projects\codecov.exe -R \msys64\home\appveyor\libfsrefs --name %TARGET% )

