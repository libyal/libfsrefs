.Dd June 30, 2023
.Dt libfsrefs 3
.Os libfsrefs
.Sh NAME
.Nm libfsrefs.h
.Nd Library to access the Resiliant File System (ReFS) format
.Sh SYNOPSIS
.In libfsrefs.h
.Pp
Support functions
.Ft const char *
.Fn libfsrefs_get_version "void"
.Ft int
.Fn libfsrefs_get_access_flags_read "void"
.Ft int
.Fn libfsrefs_get_codepage "int *codepage" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_set_codepage "int codepage" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_check_volume_signature "const char *filename" "libfsrefs_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libfsrefs_check_volume_signature_wide "const wchar_t *filename" "libfsrefs_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfsrefs_check_volume_signature_file_io_handle "libbfio_handle_t *file_io_handle" "libfsrefs_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libfsrefs_notify_set_verbose "int verbose"
.Ft int
.Fn libfsrefs_notify_set_stream "FILE *stream" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_notify_stream_open "const char *filename" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_notify_stream_close "libfsrefs_error_t **error"
.Pp
Error functions
.Ft void
.Fn libfsrefs_error_free "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_error_fprint "libfsrefs_error_t *error" "FILE *stream"
.Ft int
.Fn libfsrefs_error_sprint "libfsrefs_error_t *error" "char *string" "size_t size"
.Ft int
.Fn libfsrefs_error_backtrace_fprint "libfsrefs_error_t *error" "FILE *stream"
.Ft int
.Fn libfsrefs_error_backtrace_sprint "libfsrefs_error_t *error" "char *string" "size_t size"
.Pp
Volume functions
.Ft int
.Fn libfsrefs_volume_initialize "libfsrefs_volume_t **volume" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_free "libfsrefs_volume_t **volume" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_signal_abort "libfsrefs_volume_t *volume" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_open "libfsrefs_volume_t *volume" "const char *filename" "int access_flags" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_close "libfsrefs_volume_t *volume" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_bytes_per_sector "libfsrefs_volume_t *volume" "uint16_t *bytes_per_sector" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_cluster_block_size "libfsrefs_volume_t *volume" "size32_t *cluster_block_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_utf8_name_size "libfsrefs_volume_t *volume" "size_t *utf8_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_utf8_name "libfsrefs_volume_t *volume" "uint8_t *utf8_string" "size_t utf8_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_utf16_name_size "libfsrefs_volume_t *volume" "size_t *utf16_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_utf16_name "libfsrefs_volume_t *volume" "uint16_t *utf16_string" "size_t utf16_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_version "libfsrefs_volume_t *volume" "uint8_t *major_version" "uint8_t *minor_version" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_serial_number "libfsrefs_volume_t *volume" "uint64_t *serial_number" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_volume_get_root_directory "libfsrefs_volume_t *volume" "libfsrefs_file_entry_t **file_entry" "libfsrefs_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libfsrefs_volume_open_wide "libfsrefs_volume_t *volume" "const wchar_t *filename" "int access_flags" "libfsrefs_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libfsrefs_volume_open_file_io_handle "libfsrefs_volume_t *volume" "libbfio_handle_t *file_io_handle" "int access_flags" "libfsrefs_error_t **error"
.Pp
File entry functions
.Ft int
.Fn libfsrefs_file_entry_free "libfsrefs_file_entry_t **file_entry" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_creation_time "libfsrefs_file_entry_t *file_entry" "uint64_t *filetime" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_modification_time "libfsrefs_file_entry_t *file_entry" "uint64_t *filetime" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_access_time "libfsrefs_file_entry_t *file_entry" "uint64_t *filetime" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_entry_modification_time "libfsrefs_file_entry_t *file_entry" "uint64_t *filetime" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_file_attribute_flags "libfsrefs_file_entry_t *file_entry" "uint32_t *file_attribute_flags" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_utf8_name_size "libfsrefs_file_entry_t *file_entry" "size_t *utf8_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_utf8_name "libfsrefs_file_entry_t *file_entry" "uint8_t *utf8_string" "size_t utf8_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_utf16_name_size "libfsrefs_file_entry_t *file_entry" "size_t *utf16_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_utf16_name "libfsrefs_file_entry_t *file_entry" "uint16_t *utf16_string" "size_t utf16_string_size" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_number_of_sub_file_entries "libfsrefs_file_entry_t *file_entry" "int *number_of_sub_file_entries" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_sub_file_entry_by_index "libfsrefs_file_entry_t *file_entry" "int sub_file_entry_index" "libfsrefs_file_entry_t **sub_file_entry" "libfsrefs_error_t **error"
.Ft int
.Fn libfsrefs_file_entry_get_size "libfsrefs_file_entry_t *file_entry" "size64_t *size" "libfsrefs_error_t **error"
.Sh DESCRIPTION
The
.Fn libfsrefs_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or \-1 on error, dependent on the return type.
For the actual return values see "libfsrefs.h".
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
libfsrefs can be compiled with wide character support (wchar_t).
.sp
To compile libfsrefs with wide character support use:
.Ar ./configure --enable-wide-character-type=yes
 or define:
.Ar _UNICODE
 or
.Ar UNICODE
 during compilation.
.sp
.Ar LIBFSREFS_WIDE_CHARACTER_TYPE
 in libfsrefs/features.h can be used to determine if libfsrefs was compiled with wide character support.
.Sh BUGS
Please report bugs of any kind on the project issue tracker: https://github.com/libyal/libfsrefs/issues
.Sh AUTHOR
These man pages are generated from "libfsrefs.h".
.Sh COPYRIGHT
Copyright (C) 2012-2024, Joachim Metz <joachim.metz@gmail.com>.
.sp
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libfsrefs.h include file
