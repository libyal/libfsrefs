/*
 * Library to access the Resiliant File System (ReFS) format
 *
 * Copyright (C) 2012-2024, Joachim Metz <joachim.metz@gmail.com>
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#if !defined( _LIBFSREFS_H )
#define _LIBFSREFS_H

#include <libfsrefs/codepage.h>
#include <libfsrefs/definitions.h>
#include <libfsrefs/error.h>
#include <libfsrefs/extern.h>
#include <libfsrefs/features.h>
#include <libfsrefs/types.h>

#include <stdio.h>

#if defined( LIBFSREFS_HAVE_BFIO )
#include <libbfio.h>
#endif

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version
 */
LIBFSREFS_EXTERN \
const char *libfsrefs_get_version(
             void );

/* Returns the access flags for reading
 */
LIBFSREFS_EXTERN \
int libfsrefs_get_access_flags_read(
     void );

/* Retrieves the narrow system string codepage
 * A value of 0 represents no codepage, UTF-8 encoding is used instead
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_get_codepage(
     int *codepage,
     libfsrefs_error_t **error );

/* Sets the narrow system string codepage
 * A value of 0 represents no codepage, UTF-8 encoding is used instead
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_set_codepage(
     int codepage,
     libfsrefs_error_t **error );

/* Determines if a file contains a REFS volume signature
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_check_volume_signature(
     const char *filename,
     libfsrefs_error_t **error );

#if defined( LIBFSREFS_HAVE_WIDE_CHARACTER_TYPE )

/* Determines if a file contains a REFS volume signature
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_check_volume_signature_wide(
     const wchar_t *filename,
     libfsrefs_error_t **error );

#endif /* defined( LIBFSREFS_HAVE_WIDE_CHARACTER_TYPE ) */

#if defined( LIBFSREFS_HAVE_BFIO )

/* Determines if a file contains a REFS volume signature using a Basic File IO (bfio) handle
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_check_volume_signature_file_io_handle(
     libbfio_handle_t *file_io_handle,
     libfsrefs_error_t **error );

#endif /* defined( LIBFSREFS_HAVE_BFIO ) */

/* -------------------------------------------------------------------------
 * Notify functions
 * ------------------------------------------------------------------------- */

/* Sets the verbose notification
 */
LIBFSREFS_EXTERN \
void libfsrefs_notify_set_verbose(
      int verbose );

/* Sets the notification stream
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_notify_set_stream(
     FILE *stream,
     libfsrefs_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_notify_stream_open(
     const char *filename,
     libfsrefs_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_notify_stream_close(
     libfsrefs_error_t **error );

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees an error
 */
LIBFSREFS_EXTERN \
void libfsrefs_error_free(
      libfsrefs_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_error_fprint(
     libfsrefs_error_t *error,
     FILE *stream );

/* Prints a descriptive string of the error to the string
 * The end-of-string character is not included in the return value
 * Returns the number of printed characters if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_error_sprint(
     libfsrefs_error_t *error,
     char *string,
     size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_error_backtrace_fprint(
     libfsrefs_error_t *error,
     FILE *stream );

/* Prints a backtrace of the error to the string
 * The end-of-string character is not included in the return value
 * Returns the number of printed characters if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_error_backtrace_sprint(
     libfsrefs_error_t *error,
     char *string,
     size_t size );

/* -------------------------------------------------------------------------
 * Volume functions
 * ------------------------------------------------------------------------- */

/* Creates a volume
 * Make sure the value volume is referencing, is set to NULL
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_initialize(
     libfsrefs_volume_t **volume,
     libfsrefs_error_t **error );

/* Frees a volume
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_free(
     libfsrefs_volume_t **volume,
     libfsrefs_error_t **error );

/* Signals the volume to abort its current activity
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_signal_abort(
     libfsrefs_volume_t *volume,
     libfsrefs_error_t **error );

/* Opens a volume
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_open(
     libfsrefs_volume_t *volume,
     const char *filename,
     int access_flags,
     libfsrefs_error_t **error );

#if defined( LIBFSREFS_HAVE_WIDE_CHARACTER_TYPE )

/* Opens a volume
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_open_wide(
     libfsrefs_volume_t *volume,
     const wchar_t *filename,
     int access_flags,
     libfsrefs_error_t **error );

#endif /* defined( LIBFSREFS_HAVE_WIDE_CHARACTER_TYPE ) */

#if defined( LIBFSREFS_HAVE_BFIO )

/* Opens a volume using a Basic File IO (bfio) handle
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_open_file_io_handle(
     libfsrefs_volume_t *volume,
     libbfio_handle_t *file_io_handle,
     int access_flags,
     libfsrefs_error_t **error );

#endif /* defined( LIBFSREFS_HAVE_BFIO ) */

/* Closes a volume
 * Returns 0 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_close(
     libfsrefs_volume_t *volume,
     libfsrefs_error_t **error );

/* Retrieves the bytes per sector
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_bytes_per_sector(
     libfsrefs_volume_t *volume,
     uint16_t *bytes_per_sector,
     libfsrefs_error_t **error );

/* Retrieves the cluster block size
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_cluster_block_size(
     libfsrefs_volume_t *volume,
     size32_t *cluster_block_size,
     libfsrefs_error_t **error );

/* Retrieves the size of the UTF-8 encoded name
 * The returned size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_utf8_name_size(
     libfsrefs_volume_t *volume,
     size_t *utf8_string_size,
     libfsrefs_error_t **error );

/* Retrieves the UTF-8 encoded name value
 * The size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_utf8_name(
     libfsrefs_volume_t *volume,
     uint8_t *utf8_string,
     size_t utf8_string_size,
     libfsrefs_error_t **error );

/* Retrieves the size of the UTF-16 encoded name
 * The returned size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_utf16_name_size(
     libfsrefs_volume_t *volume,
     size_t *utf16_string_size,
     libfsrefs_error_t **error );

/* Retrieves the UTF-16 encoded name value
 * The size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_utf16_name(
     libfsrefs_volume_t *volume,
     uint16_t *utf16_string,
     size_t utf16_string_size,
     libfsrefs_error_t **error );

/* Retrieves the format version
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_version(
     libfsrefs_volume_t *volume,
     uint8_t *major_version,
     uint8_t *minor_version,
     libfsrefs_error_t **error );

/* Retrieves the serial number
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_serial_number(
     libfsrefs_volume_t *volume,
     uint64_t *serial_number,
     libfsrefs_error_t **error );

/* Retrieves the root directory file entry
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_volume_get_root_directory(
     libfsrefs_volume_t *volume,
     libfsrefs_file_entry_t **file_entry,
     libfsrefs_error_t **error );

/* -------------------------------------------------------------------------
 * File entry functions
 * ------------------------------------------------------------------------- */

/* Frees a file entry
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_free(
     libfsrefs_file_entry_t **file_entry,
     libfsrefs_error_t **error );

/* Retrieves the creation date and time
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_creation_time(
     libfsrefs_file_entry_t *file_entry,
     uint64_t *filetime,
     libfsrefs_error_t **error );

/* Retrieves the modification date and time
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_modification_time(
     libfsrefs_file_entry_t *file_entry,
     uint64_t *filetime,
     libfsrefs_error_t **error );

/* Retrieves the access date and time
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_access_time(
     libfsrefs_file_entry_t *file_entry,
     uint64_t *filetime,
     libfsrefs_error_t **error );

/* Retrieves the entry modification date and time
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_entry_modification_time(
     libfsrefs_file_entry_t *file_entry,
     uint64_t *filetime,
     libfsrefs_error_t **error );

/* Retrieves the file attribute flags
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_file_attribute_flags(
     libfsrefs_file_entry_t *file_entry,
     uint32_t *file_attribute_flags,
     libfsrefs_error_t **error );

/* Retrieves the size of the UTF-8 encoded name
 * This function uses UTF-8 RFC 2279 (or 6-byte UTF-8) to support characters outside Unicode
 * The returned size includes the end of string character
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_utf8_name_size(
     libfsrefs_file_entry_t *file_entry,
     size_t *utf8_string_size,
     libfsrefs_error_t **error );

/* Retrieves the UTF-8 encoded name
 * This function uses UTF-8 RFC 2279 (or 6-byte UTF-8) to support characters outside Unicode
 * The size should include the end of string character
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_utf8_name(
     libfsrefs_file_entry_t *file_entry,
     uint8_t *utf8_string,
     size_t utf8_string_size,
     libfsrefs_error_t **error );

/* Retrieves the size of the UTF-16 encoded name
 * This function uses UCS-2 (with surrogates) to support characters outside Unicode
 * The returned size includes the end of string character
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_utf16_name_size(
     libfsrefs_file_entry_t *file_entry,
     size_t *utf16_string_size,
     libfsrefs_error_t **error );

/* Retrieves the UTF-16 encoded name
 * This function uses UCS-2 (with surrogates) to support characters outside Unicode
 * The size should include the end of string character
 * Returns 1 if successful, 0 if not available or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_utf16_name(
     libfsrefs_file_entry_t *file_entry,
     uint16_t *utf16_string,
     size_t utf16_string_size,
     libfsrefs_error_t **error );

/* Retrieves the number of sub file entries
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_number_of_sub_file_entries(
     libfsrefs_file_entry_t *file_entry,
     int *number_of_sub_file_entries,
     libfsrefs_error_t **error );

/* Retrieves the sub file entry for the specific index
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_sub_file_entry_by_index(
     libfsrefs_file_entry_t *file_entry,
     int sub_file_entry_index,
     libfsrefs_file_entry_t **sub_file_entry,
     libfsrefs_error_t **error );

/* Retrieves the size of the default data stream (nameless $DATA attribute)
 * Returns 1 if successful or -1 on error
 */
LIBFSREFS_EXTERN \
int libfsrefs_file_entry_get_size(
     libfsrefs_file_entry_t *file_entry,
     size64_t *size,
     libfsrefs_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif /* !defined( _LIBFSREFS_H ) */

